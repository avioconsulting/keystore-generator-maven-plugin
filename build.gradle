import groovy.xml.XmlUtil
import org.apache.tools.ant.taskdefs.condition.Os

group 'com.avioconsulting.util'
version '1.0.2'

configurations {
    provided
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'maven'

sourceSets {
    main {
        compileClasspath += configurations.provided
    }
    test {
        compileClasspath += configurations.provided
        runtimeClasspath += configurations.provided
    }
}

sourceCompatibility = 1.8

def getMavenCreds = { String id ->
    def m2Dir = new File(System.getProperty('user.home'), '.m2')
    def settingsXmlPath = new File(m2Dir, 'settings.xml')
    assert settingsXmlPath.exists()
    def xmlNode = new XmlParser().parse(settingsXmlPath.absolutePath)
    def serverCreds = xmlNode.servers.server.find { node -> node.id.text() == id }
    assert serverCreds != null
    [user: serverCreds.username.text(), password: serverCreds.password.text()]
}

def eeCreds = getMavenCreds('avio-releases')

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: 'https://devops.avioconsulting.com/nexus/repository/avio-releases/') {
                authentication userName: eeCreds.user,
                               password: eeCreds.password
            }
        }
    }
}

clean {
    // this is a generated artifact
    delete 'pom.xml'
}

task pluginDescriptor(type: Exec) {
    def whereCommand = Os.isFamily(Os.FAMILY_WINDOWS) ? 'where mvn.cmd' : 'which mvn'
    def mvnPath = whereCommand.execute().text.trim()
    commandLine mvnPath, '-e', '-B', 'org.apache.maven.plugins:maven-plugin-plugin:3.2:descriptor'
    doFirst {
        def pom = project.file('pom.xml')
        install.repositories.mavenInstaller.pom.writeTo(pom)
        assert pom.file, "[$pom.canonicalPath] was not created"
        def pomNode = new XmlParser().parse(pom)
        pomNode.groupId[0].value = project.group
        pomNode.artifactId[0].value = project.name
        pomNode.version[0].value = version
        pomNode.appendNode('packaging', 'maven-plugin')
        def buildNode = pomNode.appendNode('build')
        buildNode.appendNode('directory', '\${project.basedir}/build')
        buildNode.appendNode('outputDirectory', '\${project.build.directory}/classes/main')
        XmlUtil.serialize(pomNode, new FileWriter(pom))
    }
    doLast {
        final pluginDescriptor = new File((File) project.compileGroovy.destinationDir, 'META-INF/maven/plugin.xml')
        assert pluginDescriptor.file, "[$pluginDescriptor.canonicalPath] was not created"
        println "Plugin descriptor file:$pluginDescriptor.canonicalPath is created successfully"
    }
}

compileGroovy.doLast {
    pluginDescriptor.execute()
}

dependencies {
    compile 'org.apache.maven:maven-plugin-api:3.3.9'
    compile 'commons-configuration:commons-configuration:1.10'
    provided 'org.apache.maven.plugin-tools:maven-plugin-annotations:3.5'
    compile 'org.codehaus.groovy:groovy-all:2.4.6'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
}
